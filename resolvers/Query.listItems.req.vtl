#*
  We will enclose all column IDs in backticks (`), so we must check that if the user supplied any backticks, they are escaped.
  
  The same applies for any input values (e.g. used for filters). In that case, we enclose them in single quotes, so we need to check that if an input has any single quotes, they are escaped. 
*#


## We should scrub / validate all inputs received for proper format and check that unescaped quotes are not present: 
#set($validSortKey = !($util.matches("^.*(?<!')'('')*(?!').*$",$ctx.args.sortKey)))

#if (!$validSortKey)
    $util.error("Sort key is not valid.")
#end

## Since we want to support pagination, we need to order our results.
## If the user didn't provide a specific sort order, we will sort by ID, by default
#set( $sortKey = $util.defaultIfNull($ctx.args.sortKey, "id") )

## If input specified a sort order, use that; otherwise, sort results ascending:
#set( $sortOrder = $util.defaultIfNull($ctx.args.sortOrder, "ASC") )
#if ($sortOrder == "DESC")
  #set ($sortOperator = "<")
#else
  #set( $sortOperator = ">")
#end

## Build our order clause, which might look like: ORDER BY someField ASC
#set ($orderClause = "ORDER BY ${sortKey} ${sortOrder}")

## This is the final where clause we will later send to RDS: 
#set ($finalWhereClause = "")

## We will build the final where clause above based on the individual clauses below: 
#set ($whereClauses = [])

## If a nextToken is specified, we use this to determine where to start returning results:
#if( $ctx.args.nextToken )
  #set( $nextToken = $ctx.args.nextToken)
  ## For example, the statement might look like "WHERE id > 12345"
  $util.qr($whereClauses.add("${sortKey} ${sortOperator} ${nextToken}"))
#end

#set( $filters = $ctx.args.filters)

#foreach ($filter in $filters)
  
  #if($filter.eq)  ## equals
    #if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` = '${filter.eq}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` = ${filter.eq}"))
    #end
  #end
  
  #if($filter.ne)  ## not equals
  	#if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` != '${filter.ne}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` != ${filter.ne}"))
    #end
  #end
  
  #if($filter.le)  ## less than or equal to
  	#if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` <= '${filter.le}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` <= ${filter.le}"))
    #end
  #end
  
  #if($filter.lt)  ## less than
  	#if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` < '${filter.lt}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` < ${filter.lt}"))
    #end
    
  #end
  #if($filter.ge) ## greater than or equal to
  	#if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` >= '${filter.ge}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` >= ${filter.ge}"))
    #end
    
  #end
  #if($filter.gt) ## greater than
  	#if ($filter.fieldType == "string")
      $util.qr($whereClauses.add("`${filter.fieldName}` > '${filter.gt}'"))
    #else
      $util.qr($whereClauses.add("`${filter.fieldName}` > ${filter.gt}"))
    #end
    
  #end
  
  #if($filter.in)
    #set ($inList = "")
    #foreach($item in $filter.in)
      #if ($foreach.count > 1)
        #set( $inList = $inList + ", " )
      #end
      #if ($filter.fieldType == "string")
        #set( $inList = $inList + "'${item}'")
      #else
        #set( $inList = $inList + "${item}")
      #end
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` IN (${inList})"))
  #end
  
  #if($filter.notIn)
    #set ($notInList = "")
    #foreach($item in $filter.notIn)
      #if ($foreach.count > 1)
        #set( $notInList = $notInList + ", " )
      #end
      #if ($filter.fieldType == "string")
        #set( $notInList = $notInList + "'${item}'")
      #else
        #set( $notInList = $notInList + "${item}")
      #end
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` NOT IN (${notInList})"))
  #end
  
  #if($filter.like)
    #if(filter.like != "string")
      $util.error("Cannot use like filter with ${filter.fieldName} because filter.fieldType is not 'string'")
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` LIKE '%${filter.like}%'"))
  #end
  
  #if($filter.notLike)
    #if(filter.notLike != "string")
      $util.error("Cannot use notLike filter with ${filter.fieldName} because filter.fieldType is not 'string'")
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` NOT LIKE '%${filter.notLike}%'"))
  #end
  
  #if($filter.beginsWith)
    #if(filter.beginsWith != "string")
      $util.error("Cannot use BeginsWith filter with ${filter.fieldName} because filter.fieldType is not 'string'")
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` LIKE '${filter.beginsWith}%'"))
  #end
  #if($filter.between)
    #if(filter.between != "string")
      $util.error("Cannot use between filter with ${filter.fieldName} because filter.fieldType is not 'string'")
    #end
    $util.qr($whereClauses.add("`${filter.fieldName}` BETWEEN ${filter.between[0]} AND ${filter.between[1]}"))
  #end
#end


## Build our final where clause by concatenating individual where clauses
#foreach ($whereClause in $whereClauses)
  #if( $foreach.count == 1)
    #set( $finalWhereClause = "WHERE ${whereClause}")
  #else
    #set( $finalWhereClause = "${finalWhereClause} AND ${whereClause}")
  #end
#end

## Limit the number of rows returned; if no limit specified, assume a default of 25: 
#set( $limit = $util.defaultIfNull($ctx.args.limit, 25) )

## This is our starting point; we will expand this based on the input
#set($selectClause = "SELECT * FROM demo")

## This is our final SQL command
#set($selectStatement = "${selectClause} ${finalWhereClause} ${orderClause} LIMIT ${limit}")

{
  "version": "2018-05-29",
  "statements":   ["${selectStatement}"]
}
