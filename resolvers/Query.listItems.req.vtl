## This is our starting point; we will expand this based on the input
#set($selectClause = "SELECT * FROM items")

## Since we want to support pagination, we need to order our results.
## If the user didn't provide a specific sort order, we will sort by ID, by default
#set( $sortKey = $util.defaultIfNull($ctx.args.sortKey, "id") )

## If input specified a sort order, use that; otherwise, sort results ascending:
#set( $sortOrder = $util.defaultIfNull($ctx.args.sortOrder, "ASC") )
#if ($sortOrder == "DESC")
  #set ($sortOperator = "<")
#else
  #set( $sortOperator = ">")
#end

## Build our order clause, which might look like: ORDER BY someField ASC
#set ($orderClause = "ORDER BY ${sortKey} ${sortOrder}")

## This is the final where clause we will later send to RDS: 
#set ($finalWhereClause = "")

## We will build the final where clause above based on the individual clauses below: 
#set ($whereClauses = [])

## If a nextToken is specified, we use this to determine where to start returning results:
#if( $ctx.args.nextToken )
  #set( $nextToken = $ctx.args.nextToken)
  ## For example, the statement might look like "WHERE id > 12345"
  $util.qr($whereClauses.add("${sortKey} ${sortOperator} ${nextToken}"))
#end

## Build our final where clause by concatenating individual where clauses
#foreach ($whereClause in $whereClauses)
  #if( $foreach.count == 1)
    #set( $finalWhereClause = "WHERE ${whereClause}")
  #else
    #set( $finalWhereClause = "${finalWhereClause} AND ${whereClause}")
  #end
#end

## Limit the number of rows returned; if no limit specified, assume a default of 25: 
#set( $limit = $util.defaultIfNull($ctx.args.limit, 25) )

## This is our final SQL command
#set($selectStatement = "${selectClause} ${finalWhereClause} ${orderClause} LIMIT ${limit}")

{
  "version": "2018-05-29",
  "statements":   ["${selectStatement}"]
}
